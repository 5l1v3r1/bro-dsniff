// This file is automatically generated from /home/rhost/Downloads/bro-2.4.1/src/analyzer/protocol/lol/lol.pac.

#ifndef _home_rhost_Downloads_bro_2_4_1_src_analyzer_protocol_lol_lol_pac_h
#define _home_rhost_Downloads_bro_2_4_1_src_analyzer_protocol_lol_lol_pac_h

#include <vector>

#include "binpac.h"


#include "binpac_bro.h"


	#include "events.bif.h"

namespace binpac {

namespace LOL {
class ContextLOL;
class LOL_Conn;
class LOL_PDU;
class LOL_Flow;
} // namespace LOL

int bytestring_to_int(const_bytestring const & s, int base);
double bytestring_to_double(const_bytestring const & s);
int bytestring_casecmp(const_bytestring const & s1, const_charptr const & s2);
bool bytestring_caseprefix(const_bytestring const & s1, const_charptr const & s2);
double network_time();
namespace LOL {

class ContextLOL
{
public:
	ContextLOL(LOL_Conn * connection, LOL_Flow * flow);
	~ContextLOL();
	
	// Member access functions
	LOL_Conn * connection() const { return connection_; }
	LOL_Flow * flow() const { return flow_; }
	
protected:
	LOL_Conn * connection_;
	LOL_Flow * flow_;
};


class LOL_Conn : public binpac::ConnectionAnalyzer
{
public:
	LOL_Conn(BroAnalyzer const & bro_analyzer);
	~LOL_Conn();
	
	// Member access functions
	LOL_Flow * upflow() const { return upflow_; }
	LOL_Flow * downflow() const { return downflow_; }
	BroAnalyzer const & bro_analyzer() const { return bro_analyzer_; }
	
	void NewData(bool is_orig, const_byteptr begin, const_byteptr end);
	void NewGap(bool is_orig, int gap_length);
	void FlowEOF(bool is_orig);
	
protected:
	LOL_Flow * upflow_;
	LOL_Flow * downflow_;
	BroAnalyzer bro_analyzer_;
};


class LOL_PDU
{
public:
	LOL_PDU(bool is_orig);
	~LOL_PDU();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextLOL * t_context);
	
	// Member access functions
	bytestring const & data() const { return data_; }
	bool is_orig() const { return is_orig_; }
	int byteorder() const { return byteorder_; }
	bool proc() const { return proc_; }
	
protected:
	bytestring data_;
	bool is_orig_;
	int byteorder_;
	bool proc_;
};


class LOL_Flow : public binpac::FlowAnalyzer
{
public:
	LOL_Flow(LOL_Conn * connection, bool is_orig);
	~LOL_Flow();
	
	// Member access functions
	LOL_Conn * connection() const { return connection_; }
	bool is_orig() const { return is_orig_; }
	
	void NewData(const_byteptr t_begin_of_data, const_byteptr t_end_of_data);
	void NewGap(int gap_length);
	void FlowEOF();
	
	// Functions
	bool proc_lol_message(LOL_PDU * msg);
	
protected:
	LOL_PDU * dataunit_;
	ContextLOL * context_;
	LOL_Conn * connection_;
	bool is_orig_;
};

} // namespace LOL
}  // namespace binpac
#endif /* _home_rhost_Downloads_bro_2_4_1_src_analyzer_protocol_lol_lol_pac_h */
