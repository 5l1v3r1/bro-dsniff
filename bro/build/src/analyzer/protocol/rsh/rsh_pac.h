// This file is automatically generated from /home/rhost/Downloads/bro-2.4.1/src/analyzer/protocol/rsh/rsh.pac.

#ifndef _home_rhost_Downloads_bro_2_4_1_src_analyzer_protocol_rsh_rsh_pac_h
#define _home_rhost_Downloads_bro_2_4_1_src_analyzer_protocol_rsh_rsh_pac_h

#include <vector>

#include "binpac.h"


#include "binpac_bro.h"


	#include "events.bif.h"

namespace binpac {

namespace RSH {
class ContextRSH;
class RSH_Conn;
extern RegExMatcher RSH_PDU_re_001;

extern RegExMatcher RSH_PDU_re_002;

extern RegExMatcher RSH_PDU_re_003;

class RSH_PDU;
class RSH_Flow;
} // namespace RSH

int bytestring_to_int(const_bytestring const & s, int base);
double bytestring_to_double(const_bytestring const & s);
int bytestring_casecmp(const_bytestring const & s1, const_charptr const & s2);
bool bytestring_caseprefix(const_bytestring const & s1, const_charptr const & s2);
double network_time();
namespace RSH {

class ContextRSH
{
public:
	ContextRSH(RSH_Conn * connection, RSH_Flow * flow);
	~ContextRSH();
	
	// Member access functions
	RSH_Conn * connection() const { return connection_; }
	RSH_Flow * flow() const { return flow_; }
	
protected:
	RSH_Conn * connection_;
	RSH_Flow * flow_;
};


class RSH_Conn : public binpac::ConnectionAnalyzer
{
public:
	RSH_Conn(BroAnalyzer const & bro_analyzer);
	~RSH_Conn();
	
	// Member access functions
	RSH_Flow * upflow() const { return upflow_; }
	RSH_Flow * downflow() const { return downflow_; }
	BroAnalyzer const & bro_analyzer() const { return bro_analyzer_; }
	
	void NewData(bool is_orig, const_byteptr begin, const_byteptr end);
	void NewGap(bool is_orig, int gap_length);
	void FlowEOF(bool is_orig);
	
protected:
	RSH_Flow * upflow_;
	RSH_Flow * downflow_;
	BroAnalyzer bro_analyzer_;
};


class RSH_PDU
{
public:
	RSH_PDU();
	~RSH_PDU();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextRSH * t_context);
	
	// Member access functions
	bytestring const & clientUsername() const { return clientUsername_; }
	uint8 pointO() const { return pointO_; }
	bytestring const & serverUsername() const { return serverUsername_; }
	uint8 pointT() const { return pointT_; }
	bytestring const & restOfData() const { return restOfData_; }
	int byteorder() const { return byteorder_; }
	bool proc() const { return proc_; }
	
protected:
	bytestring clientUsername_;
	uint8 pointO_;
	bytestring serverUsername_;
	uint8 pointT_;
	bytestring restOfData_;
	int byteorder_;
	bool proc_;
};


class RSH_Flow : public binpac::FlowAnalyzer
{
public:
	RSH_Flow(RSH_Conn * connection);
	~RSH_Flow();
	
	// Member access functions
	RSH_Conn * connection() const { return connection_; }
	
	void NewData(const_byteptr t_begin_of_data, const_byteptr t_end_of_data);
	void NewGap(int gap_length);
	void FlowEOF();
	
	// Functions
	bool proc_rsh_username(RSH_PDU * msg);
	
protected:
	RSH_PDU * dataunit_;
	ContextRSH * context_;
	RSH_Conn * connection_;
};

} // namespace RSH
}  // namespace binpac
#endif /* _home_rhost_Downloads_bro_2_4_1_src_analyzer_protocol_rsh_rsh_pac_h */
