##! Implements base functionality for poppassd analysis.
##! Generates the Poppassd.log file.

# Generated by binpac_quickstart

module Poppassd;

export {
	redef enum Log::ID += { LOG };

	type Info: record {
		## Timestamp for when the event happened.
		ts:     time    &log;
		## Unique ID for the connection.
		uid:    string  &log;
		## The connection's 4-tuple of endpoint addresses/ports.
		id:     conn_id &log;
		
		# ## TODO: Add other fields here that you'd like to log.
	};

	## Event that can be handled to access the poppassd record as it is sent on
	## to the loggin framework.
	global log_poppassd: event(rec: Info);
}

# TODO: The recommended method to do dynamic protocol detection
# (DPD) is with the signatures in dpd.sig. If you can't come up
# with any signatures, then you can do port-based detection by

const ports = {106/tcp};


redef likely_server_ports += { ports };

event bro_init() &priority=5
	{
	Log::create_stream(Poppassd::LOG, [$columns=Info, $ev=log_poppassd, $path="poppassd"]);

	# TODO: If you're using port-based DPD, uncomment this.
	# Analyzer::register_for_ports(Analyzer::ANALYZER_POPPASSD, ports);
	}

event poppassd_event(c: connection,user:string,pass:string,newpass:string){
	local info: Info;
	info$ts  = network_time();
	info$uid = c$uid;
	info$id  = c$id;

	Log::write(Poppassd::LOG, info);
	print "holla";
        print user;
        print pass;
        print newpass;
}

event tcp_packet(c: connection, is_orig: bool, flags: string, seq: count, ack: count, len: count, payload: string){
     print payload;	 
      }
