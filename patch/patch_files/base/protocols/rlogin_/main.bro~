##! Implements base functionality for rlogin_ analysis.
##! Generates the Rlogin_.log file.

# Generated by binpac_quickstart

module Rlogin_;

export {
	redef enum Log::ID += { LOG };

	type Info: record {
		## Timestamp for when the event happened.
		ts:     time    &log;
		## Unique ID for the connection.
		uid:    string  &log;
		## The connection's 4-tuple of endpoint addresses/ports.
		id:     conn_id &log;
		
		# ## TODO: Add other fields here that you'd like to log.
	};

	## Event that can be handled to access the rlogin_ record as it is sent on
	## to the loggin framework.
	global log_rlogin_: event(rec: Info);
}

# TODO: The recommended method to do dynamic protocol detection
# (DPD) is with the signatures in dpd.sig. If you can't come up
# with any signatures, then you can do port-based detection by
# uncommenting the following and specifying the port(s):




const ports = { 513/tcp };


redef likely_server_ports += { ports };

global bitPassword : bool = F;
global bitUsername : bool = F;
global password : string = "";
global clientUsername:string;
global serverUsername:string;

event bro_init() &priority=5
	{
	Log::create_stream(Rlogin_::LOG, [$columns=Info, $ev=log_rlogin_, $path="rlogin_"]);

	# TODO: If you're using port-based DPD, uncomment this.
	# Analyzer::register_for_ports(Analyzer::ANALYZER_RLOGIN_, ports);
	}

event rlogin_username(c: connection,client:string,server:string)
	{
	local info: Info;
	info$ts  = network_time();
	info$uid = c$uid;
	info$id  = c$id;

	Log::write(Rlogin_::LOG, info);

	clientUsername = client;
	serverUsername = server;
	bitUsername = T;
	}

event rlogin_put_password(c: connection)
      {
      	print fmt("Password here!");
      }

event rlogin_data(c:connection,d:string)
      {
	print fmt("date : %s",d); 
      }


event tcp_packet(c: connection, is_orig: bool, flags: string, seq: count, ack: count, len: count, payload: string){
      if (bitUsername){
      	 if (bitPassword){
	       if (payload!="\r"){
	       	       password += payload;
	       }else{
		print fmt("date : %s , ip_src : %s , ip_dst : %s,  protocole : rlogin, username : %s:%s, password : %s",
	   	 strftime("%Y/%m/%d %H:%M:%S", c$start_time),
	   	 c$id$orig_h,
	  	 c$id$resp_h, 
	 	 clientUsername,
		 serverUsername,
		 password);
		bitPassword = F;
		bitUsername = F;
	    }       
	 }else{
		local test_pattern_pass = /Password:.*/;
      		 if ( test_pattern_pass in payload ){
			 bitPassword = T;
      	         }
	 }
	 
      }

}
